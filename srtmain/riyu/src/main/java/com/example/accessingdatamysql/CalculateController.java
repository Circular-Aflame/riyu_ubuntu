package com.example.accessingdatamysql;

import org.json.JSONException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import com.example.accessingdatamysql.tool.UserUtils;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;

@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class CalculateController {
    private static final Logger logger = LoggerFactory.getLogger(CalculateController.class);

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @PostMapping(path = "/calculate")
    public @ResponseBody String mfaCalculate(@RequestParam String token, @RequestParam String filename, @RequestParam String words) throws JSONException, IOException, InterruptedException {

        logger.debug("bug is here");

        String cachePath = UserUtils.getUserFolderCachePathByToken(token);
        String consistPath = UserUtils.getUserFolderConsistPathByToken(token);

        logger.debug("this is cachePath");
        logger.debug(cachePath);

        String sourceFilePath = cachePath + "/" + filename;
        String destinationDirectoryPath = consistPath + "/" + String.valueOf(System.currentTimeMillis()) + "#" + words;

        File sourceFile = new File(sourceFilePath);
        File destinationDir = new File(destinationDirectoryPath);

        String newFileName = words + ".wav";

        destinationDir.mkdirs();

        Path destinationFilePath = destinationDir.toPath().resolve(newFileName);

        Files.copy(sourceFile.toPath(), destinationFilePath, StandardCopyOption.REPLACE_EXISTING);

        FileWriter writer = new FileWriter(destinationDirectoryPath + "/" + words + ".txt");
        writer.write(words);
        writer.close();

        return "12";
    }
}