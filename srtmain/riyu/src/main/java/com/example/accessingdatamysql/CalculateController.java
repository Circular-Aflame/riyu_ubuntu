package com.example.accessingdatamysql;

import com.example.accessingdatamysql.tool.MyResponse;
import com.fasterxml.jackson.core.json.JsonReadFeature;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import jakarta.persistence.criteria.CriteriaBuilder;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.text.DecimalFormat;
import java.util.Arrays;

@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class CalculateController {
    private static final Logger logger = LoggerFactory.getLogger(CalculateController.class);

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Value("${file.upload.root.url}")
    private String uploadFileRootPath;
    @Value("${file.cache.url}")
    private String cachePath;
    @Value("${file.consistent.save.url}")
    private String consistentPath;

    @CrossOrigin(origins = "*")
    @PostMapping(path = "/calculate")
    public @ResponseBody String mfaCalculate(@RequestParam String token, @RequestParam String filename, @RequestParam String words) throws JSONException, IOException, InterruptedException {

        logger.debug("bug is here");
        logger.debug("this is calculate");
        logger.debug("token is {}", token);
        logger.debug("filename is {}", filename);


        User user = userRepository.findByToken(token);

        if(user == null)
            return MyResponse.response_success("Bad token", 60000).toString();

        String userCachePath = uploadFileRootPath + "/" + user.getDeviceId() + cachePath;
        String userConsistPath = uploadFileRootPath + "/" + user.getDeviceId() + consistentPath;

        logger.debug("this is cachePath");
        logger.debug(userCachePath);

        String sourceFilePath = userCachePath + "/" + filename;
        String destinationDirectoryPath = userConsistPath + "/" + String.valueOf(System.currentTimeMillis()) + "#" + words;

        File sourceFile = new File(sourceFilePath);
        File destinationDir = new File(destinationDirectoryPath);

        String newFileName = words + ".wav";

        destinationDir.mkdirs();

        Path destinationFilePath = destinationDir.toPath().resolve(newFileName);

//        Files.copy(sourceFile.toPath(), destinationFilePath, StandardCopyOption.REPLACE_EXISTING);

        String command = "/home/ubuntu/anaconda3/bin/python";
        String scriptPath = "/home/ubuntu/srtmain/audTrans/audio_trans2wav.py";

        ProcessBuilder processBuilder = new ProcessBuilder(command, scriptPath, sourceFilePath, destinationFilePath.toString());

        logger.debug("cmd is {}", command +" "+ scriptPath +" "+ sourceFilePath +" "+ destinationFilePath.toString());
        // 启动进程并执行命令
        Process process = processBuilder.start();

        // 读取命令的输出信息
        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
        String line;
        while ((line = reader.readLine()) != null) {
            logger.debug("now is the command out");
            logger.debug(line);
        }

        // 等待命令执行完成
        int exitCode = process.waitFor();
        logger.debug("Command execution completed with exit code: " + exitCode);


        FileWriter writer = new FileWriter(destinationDirectoryPath + "/" + words + ".txt");
        writer.write(words);
        writer.close();

        // 以上完成了 录音文件的保存，保存位置为destinationDirectoryPath，保存文件夹名字为 timestmp#words

        command = "/home/ubuntu/anaconda3/bin/python";
        scriptPath = "/home/ubuntu/test/mfa_controller.py";
        String audioFilePath = destinationDirectoryPath;

        processBuilder = new ProcessBuilder(command, scriptPath, audioFilePath);

        logger.debug("cmd is {}", command + scriptPath + audioFilePath);
        // 启动进程并执行命令
        process = processBuilder.start();

        // 读取命令的输出信息
        reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
        while ((line = reader.readLine()) != null) {
            logger.debug("now is the command out");
            logger.debug(line);
        }

        // 等待命令执行完成
        exitCode = process.waitFor();
        logger.debug("Command execution completed with exit code: " + exitCode);


        // 至此，处理完 output.json 在 工作目录下

        command = "/home/ubuntu/anaconda3/bin/python";
        scriptPath = "/home/ubuntu/srtmain/praat/get_freq.py";
        audioFilePath = destinationDirectoryPath + "/" + words + ".wav";

        processBuilder = new ProcessBuilder(command, scriptPath, audioFilePath);

        logger.debug("cmd is {}", command + scriptPath + audioFilePath);
        // 启动进程并执行命令
        process = processBuilder.start();

        // 读取命令的输出信息
        reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
        while ((line = reader.readLine()) != null) {
            logger.debug("now is the command out");
            logger.debug(line);
        }

        // 等待命令执行完成
        exitCode = process.waitFor();
        logger.debug("Command execution completed with exit code: " + exitCode);

        // 至此，output.json 为 平假名 到 时间 的对应
        // ${words}.json 为 时间 到 freq 的对应

        ObjectMapper objectMapper = new ObjectMapper();
        JsonNode mfaNode = objectMapper.readTree(new File(destinationDirectoryPath + "/" + "output.json"));
        JsonNode pitchNode = objectMapper.readTree(new File(destinationDirectoryPath + "/" + words + ".json"));

        // 获取 "freq" 字段的值
        JsonNode freqNode = pitchNode.get("freq");
        JsonNode timeNode = pitchNode.get("time");

        JsonNode hiraNode = mfaNode.get("kanas");
        JsonNode startNode = mfaNode.get("starts");
        JsonNode endNode = mfaNode.get("ends");

        double[] freqArray = objectMapper.convertValue(freqNode, double[].class);

        double[] timeArray = objectMapper.convertValue(timeNode, double[].class);

        double[] startArray = objectMapper.convertValue(startNode, double[].class);

        double[] endArray = objectMapper.convertValue(endNode, double[].class);

        String[] hiraArray = objectMapper.readValue(hiraNode.toString(), String[].class);

        double[] meanArray = new double[hiraArray.length];

        int valid_time = timeArray.length - 1;
        for(; freqArray[valid_time] == -1; valid_time--);

        if(valid_time + 10 > timeArray.length - 1)
            valid_time = timeArray.length - 1;
        else
            valid_time += 10;





        int meanId = 0;
        double nowSum = 0;
        double nowSumNum = 0;
        for(int i = 0; i < timeArray.length; i++) {
            if(meanId >= hiraArray.length)
                break;
            if(timeArray[i] >= startArray[meanId] && freqArray[i] != -1) {
                nowSumNum ++;
                nowSum += (int) freqArray[i];
            }
            if(timeArray[i] >= endArray[meanId]) {
                meanArray[meanId] = Math.round(nowSum / nowSumNum * 100.0) / 100.0;
                meanId ++;
                nowSum = 0;
                nowSumNum = 0;
            }
        }

        if(meanId < hiraArray.length)
            meanArray[meanId] = Math.round(nowSum / nowSumNum * 100.0) / 100.0;

        timeArray = Arrays.copyOfRange(timeArray, 0, valid_time - 1);
        freqArray = Arrays.copyOfRange(freqArray, 0, valid_time - 1);

        JSONObject json = new JSONObject();
        json.put("code", 0);
        json.put("info", "Success in calculating");

        // 构建 data 对象
        JSONObject data = new JSONObject();

        JSONArray hira = new JSONArray(hiraArray);
        data.put("hira", hira);

        JSONArray start = new JSONArray(startArray);
        data.put("start", start);

        JSONArray end = new JSONArray(endArray);
        data.put("end", end);

        // 构建 pitch 对象
        JSONObject pitch = new JSONObject();

        JSONArray mean = new JSONArray(meanArray);
        pitch.put("mean", mean);

        JSONArray allTime = new JSONArray(timeArray);
        pitch.put("allTime", allTime);

        JSONArray allValue = new JSONArray(freqArray);
        pitch.put("allValue", allValue);

        data.put("pitch", pitch);

        json.put("data", data);

        logger.debug("cal end");
        logger.debug(json.toString());
        // 将 JSON 对象转换为字符串
        return json.toString();
//        JSONObject json = MyResponse.response_success("test no cal", 0);
//        json.put("data", "no data");
//        return json.toString();
    }
}