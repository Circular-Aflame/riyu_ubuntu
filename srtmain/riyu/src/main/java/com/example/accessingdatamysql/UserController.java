package com.example.accessingdatamysql;

import com.example.accessingdatamysql.tool.MyResponse;
import org.json.JSONException;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.io.File;

@Controller // This means that this class is a Controller
@RequestMapping(path="/demo/user") // This means URL's start with /demo (after Application path)
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    private static final Logger logger = LoggerFactory.getLogger(UserController.class);


    @Value("${file.upload.root.url}")
    private String userdataRootPath;
    @Value("${file.cache.url}")
    private String cachePath;
    @Value("${file.consistent.save.url}")
    private String consistentPath;

    // 处理用户登录，因为每次都可以改变昵称
    @CrossOrigin(origins = "*")
    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (
            @RequestParam String deviceId, @RequestParam String timestamp, @RequestParam String username) throws JSONException {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        logger.debug("/user/add 请求体");
        logger.debug("this is deviceId {}", deviceId);
        logger.debug("this is timestamp {}", timestamp);
        logger.debug("this is username {}", username);

        JSONObject object = new JSONObject();

//        userRepository.deleteAll();

        String userPath = userdataRootPath + "/" + deviceId;
        File userDirectory = new File(userPath);
        if(!userDirectory.exists())
            userDirectory.mkdir();

        String token = deviceId + timestamp;

        User user = userRepository.findByDeviceId(deviceId);

        String info = "";

        if (user != null) {
            user.setUsername(username);
            user.setToken(token);
            userRepository.save(user);
            info = "Success in changing";
        }
        else {
            User n = new User();
            n.setUsername(username);
            n.setDeviceId(deviceId);
            n.setToken(token);
            userRepository.save(n);
            info = "Success in saving";
        }

        object.put("info", info);
        object.put("code", 0);
//        object.put("code", 60000);
        object.put("token", token);

        return object.toString();
    }

    @CrossOrigin(origins = "*")
    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @CrossOrigin(origins = "*")
    @GetMapping(path="/lastname")
    public @ResponseBody String getUserLastname(@RequestParam String deviceId) throws JSONException {
        // This returns a JSON or XML with the users
        User user = userRepository.findByDeviceId(deviceId);
        JSONObject object = MyResponse.response_success("Success in getting last username", 0);

        String username = "";
        if(user != null) {
            username = user.getUsername();
        }

        object.put("username", username);
        return object.toString();
    }

}